{"version":3,"sources":["components/Counter/ColorPicker/ColorPicker.js","App.js","index.js"],"names":["ColorPicker","state","activeOptionIdx","setActiveIdx","index","setState","makeOptionClassName","optionClasses","push","join","this","options","props","label","console","log","className","map","color","style","backgroundColor","onClick","Component","colorPickerOptions","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"oOAwDeA,E,4MAlDbC,MAAQ,CACNC,gBAAiB,G,EAGnBC,aAAe,SAAAC,GACb,EAAKC,SAAS,CAAEH,gBAAiBE,K,EAGjCE,oBAAsB,SAAAF,GAEtB,IAAMG,EAAgB,CAAC,uBAMvB,OAJIH,IAAU,EAAKH,MAAMC,iBACvBK,EAAcC,KAAK,+BAGdD,EAAcE,KAAK,M,4CAG5B,WAAU,IAAD,OACCP,EAAoBQ,KAAKT,MAAzBC,gBACAS,EAAYD,KAAKE,MAAjBD,QACEE,EAAUF,EAAQT,GAAlBW,MAKV,OAFJC,QAAQC,IAAI,CAACF,UAGP,sBAAKG,UAAU,cAAf,UACM,oBAAIA,UAAU,qBAAd,0BADN,kOAGE,gGAAiBH,KACjB,8BACGF,EAAQM,KAAI,WAAmBb,GAAnB,IAAGS,EAAH,EAAGA,MAAOK,EAAV,EAAUA,MAAV,OACX,wBAEEF,UAAW,EAAKV,oBAAoBF,GAChCe,MAAO,CAAEC,gBAAiBF,GAG9BG,QAAS,kBAAM,EAAKlB,aAAaC,KAL5BS,e,GArCOS,aCGpBC,EAAqB,CACzB,CAAEV,MAAO,MAAOK,MAAO,WACvB,CAAEL,MAAO,QAASK,MAAO,WACzB,CAAEL,MAAO,OAAQK,MAAO,WACxB,CAAEL,MAAO,OAAQK,MAAO,WACxB,CAAEL,MAAO,OAAQK,MAAO,WACxB,CAAEL,MAAO,SAAUK,MAAO,YAqDbM,EAlDH,kBACV,qCACE,qJAIA,cAAC,EAAD,CAAab,QAASY,QCjB1BE,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.153c47ed.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport './ColorPicker.css';\r\n\r\n\r\nclass ColorPicker extends Component {\r\n    //называем индекс 0 и в мэп передаем индекс по нему добавляем класс дополнительный при активной кнопке\r\n  state = {\r\n    activeOptionIdx: 0,\r\n  };\r\n//поверх записываем новый индекс той кнопки, что нажимаем и кидает его в стейт\r\n  setActiveIdx = index => {\r\n    this.setState({ activeOptionIdx: index });\r\n  };\r\n\r\n    makeOptionClassName = index => {\r\n      //делаем базовый класс\r\n    const optionClasses = ['ColorPicker__option'];\r\n     //по условию добавляем класс\r\n    if (index === this.state.activeOptionIdx) {\r\n      optionClasses.push('ColorPicker__option--active');\r\n    }\r\n\r\n    return optionClasses.join(' ');\r\n  };\r\n\r\n  render() {\r\n    const { activeOptionIdx } = this.state;\r\n    const { options } = this.props;\r\n      const { label } = options[activeOptionIdx];\r\n      //const {label} = this.props.options[this.state.activeOptionIdx] цвет и слово из массива!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!1:20лекция\r\n      //вычисляемое свойство на базе пропов и стейта и декструрезируем что нам надо \r\nconsole.log({label})\r\n\r\n    return (\r\n      <div className=\"ColorPicker\">\r\n            <h2 className=\"ColorPicker__title\">Color Picker</h2>\r\n            //добавляем слово из массива при клике==============================\r\n        <p>Выбран цвет: {label}</p>\r\n        <div>\r\n          {options.map(({ label, color }, index) => (\r\n            <button\r\n              key={label}\r\n              className={this.makeOptionClassName(index)}\r\n                  style={{ backgroundColor: color }}\r\n                  //регестрируем кнопку передаем инлайн функцию, кторая во время вызова вызовет активиндекс\r\n                  //и через замыкание будет доступен индекс\r\n              onClick={() => this.setActiveIdx(index)}\r\n            ></button>\r\n          ))}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n\r\nexport default ColorPicker;","import React, { Component } from 'react';\n //import Counter from './components/Counter/Counter';\n// import Dropdown from './components/Counter/Dropdown';\n import ColorPicker from './components/Counter/ColorPicker';\n// import TodoList from './components/TodoList';\n// import initialTodos from './todos.json';\n\nconst colorPickerOptions = [\n  { label: 'red', color: '#F44336' },\n  { label: 'green', color: '#4CAF50' },\n  { label: 'blue', color: '#2196F3' },\n  { label: 'grey', color: '#607D8B' },\n  { label: 'pink', color: '#E91E63' },\n  { label: 'indigo', color: '#3F51B5' },\n];\n\nconst App = () => (\n  <>\n    <h1>Состояние компонента</h1>\n\n    {/* <Counter  initialValue={10}/> */}\n    {/* <Dropdown /> */}\n    <ColorPicker options={colorPickerOptions} />\n  </>\n);\n\n\n// class App extends Component {\n//   state = {\n//     todos: initialTodos,\n//   };\n\n//   deleteTodo = todoId => {\n//     this.setState(prevState => ({\n//       todos: prevState.todos.filter(todo => todo.id !== todoId),\n//     }));\n//   };\n\n//   render() {\n//     const { todos } = this.state;\n\n//     const totalTodoCount = todos.length;\n//     const completedTodoCount = todos.reduce(\n//       (total, todo) => (todo.completed ? total + 1 : total),\n//       0,\n//     );\n\n//     return (\n//       <>\n//         <h1>Состояние компонента</h1>\n\n//         {/* <Counter initialValue={10} /> */}\n//         {/* <Dropdown /> */}\n//         {/* <ColorPicker options={colorPickerOptions} /> */}\n\n//         <div>\n//           <p>Общее кол-во: {totalTodoCount}</p>\n//           <p>Кол-во выполненных: {completedTodoCount}</p>\n//         </div>\n\n//         <TodoList todos={todos} onDeleteTodo={this.deleteTodo} />\n//       </>\n//     );\n//   }\n// }\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}