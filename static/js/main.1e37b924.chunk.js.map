{"version":3,"sources":["components/Counter/Counter/Controls.js","components/Counter/Counter/Value.js","components/Counter/Counter/Counter.js","components/TodoList/TodoList.js","components/Form.js","components/TodoEditor/TodoEditor.js","components/Filter.js","components/Modal/Modal.js","App.js","index.js"],"names":["Controls","onIncrement","onDecrement","className","type","onClick","Value","value","Counter","state","props","initialValue","handleIncrement","setState","prevState","handleDecrement","console","log","this","React","Component","defaultProps","TodoList","todos","onDeleteTodo","onToggleCompleted","map","id","text","completed","checked","onChange","Form","name","tag","experience","nameInputId","shortid","generate","tagInputId","hendelChange","e","target","hendelSubmit","preventDefault","onSubmit","reset","htmlFor","handleChange","TodoEditor","message","currentTarget","handleSubmit","Filter","modalRoot","document","querySelector","Modal","handleKeyDown","code","onClose","handleBackdropClick","event","window","addEventListener","removeEventListener","createPortal","children","App","initialTodos","filter","showModal","toggleModal","addTodo","todo","deleteTodo","todoId","formSubmitHandler","data","toggleCompleted","changeFilter","getVisibleTodos","normalizedFilter","toLowerCase","includes","calculateCompletedTodos","reduce","total","localStorage","getItem","parsedTodos","JSON","parse","prevProps","nextTodos","setItem","stringify","totalTodoCount","length","completedTodoCount","visibleTodos","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.1e37b924.chunk.js","sourcesContent":["const Controls = ({ onIncrement, onDecrement }) => (\r\n  <div className=\"Counter__controls\">\r\n    <button type=\"button\" onClick={onIncrement}>\r\n      Увеличить на 1\r\n    </button>\r\n    <button type=\"button\" onClick={onDecrement}>\r\n      Уменьшить на 1\r\n    </button>\r\n  </div>\r\n);\r\n\r\nexport default Controls;","import React from 'react';\r\n\r\nconst Value = ({ value }) =>\r\n    <span className=\"Counter__value\">{value}</span>;\r\n\r\nexport default Value;","import React from 'react';\r\nimport Controls from './Controls';\r\n import Value from './Value';\r\nimport './Counter.css';\r\n\r\nclass Counter extends React.Component {\r\n  static defaultProps = {\r\n    initialValue: 0,\r\n  };\r\n\r\n    static propTypes = {\r\n    //\r\n  };\r\n  \r\n  state = {\r\n    // value: 5,\r\n    value: this.props.initialValue\r\n  };\r\n\r\n  // handleIncrement = () => {\r\n  //   // console.log('клик+')\r\n  //   // console.log(this)\r\n  //   this.setState({\r\n  //     value: 10\r\n  //   });\r\n  // };\r\nhandleIncrement = () => {\r\n  //  this.setState({\r\n  //      value: 10\r\n  //    });\r\n  \r\n  this.setState(prevState => ({\r\n        value: prevState.value + 1\r\n     }));\r\n  };\r\n\r\n\r\n  handleDecrement = () => {\r\n    console.log('клик-')\r\n    console.log(this)\r\n      this.setState(prevState => ({\r\n        value: prevState.value - 1\r\n     }));\r\n  }\r\n  \r\n  render() {\r\n    return (\r\n      <div className=\"Counter\">\r\n        <Value\r\n        value={this.state.value}\r\n        />\r\n        {/* <span className=\"Counter__value\">{this.state.value}</span> */}\r\n        <Controls\r\n          onIncrement={this.handleIncrement}\r\n          onDecrement={this.handleDecrement}\r\n        />\r\n         {/* <div className=\"Counter__cotrols\">\r\n          <button type=\"button\" onClick={this.handleIncrement}>Увеличить на 1</button>\r\n          <button type=\"button\" onClick={this.handleDecrement}>Уменьшить на1</button>\r\n         </div> */}\r\n       </div>\r\n    )\r\n  }\r\n};\r\n\r\n\r\n\r\n\r\nexport default Counter;","import React from 'react';\r\nimport './TodoList.css';\r\n\r\n// const TodoList = ({ todos, onDeleteTodo }) => (\r\n//   <ul className=\"TodoList\">\r\n//     {todos.map(({ id, text }) => (\r\n//       <li key={id} className=\"TodoList__item\">\r\n//             <p className=\"TodoList__text\">{text}</p>\r\n//             //делаем кнопку удалить\r\n//         <button onClick={() => onDeleteTodo(id)}>Удалить</button>\r\n//       </li>\r\n//     ))}\r\n//   </ul>\r\n// );\r\n//продолжение\r\n\r\nconst TodoList = ({ todos, onDeleteTodo, onToggleCompleted }) => (\r\n  <ul className=\"TodoList\">\r\n    {todos.map(({ id, text, completed }) => (\r\n      <li\r\n        key={id}\r\n        // className={classNames('TodoList__item', {\r\n        //   'TodoList__item--completed': completed,\r\n        // })}\r\n      >\r\n        <input\r\n          type=\"checkbox\"\r\n          // className=\"TodoList__checkbox\"\r\n          checked={completed}\r\n          onChange={() => onToggleCompleted(id)}\r\n        />\r\n        <p className=\"TodoList__text\">{text}</p>\r\n        <button\r\n          type=\"button\"\r\n          // className=\"TodoList__btn\"\r\n          onClick={() => onDeleteTodo(id)}\r\n        >\r\n          Удалить\r\n        </button>\r\n      </li>\r\n    ))}\r\n  </ul>\r\n);\r\n\r\nexport default TodoList;","import React, { Component } from 'react';\r\n  //ставим npm i shortid\r\n  import shortid from 'shortid';\r\n\r\nclass Form extends Component {\r\n    state = {\r\n        name: '',\r\n        tag: '',\r\n        experience: \"junior\",\r\n    };\r\n//генерим там лежит уникалый индефикатор\r\n     nameInputId = shortid.generate();\r\n     tagInputId = shortid.generate();\r\n\r\n    //общий метод для инпутов патерн для форм по внешнему виду контролируемій елемент\r\n    hendelChange = e => {\r\n        const { name, value } = e.target;\r\n        this.setState({\r\n            [name]: value,\r\n        })\r\n    };\r\n    //сабмит\r\n    hendelSubmit = e => { \r\n        e.preventDefault();\r\n        // console.log(this.state)\r\n        this.props.onSubmit(this.state)\r\n        this.reset();\r\n    };\r\n\r\n    //сброс формы очистить стейт\r\n  reset = () => {\r\n    this.setState({\r\n       name: '',\r\n        tag: ''\r\n          })\r\n  }\r\n\r\n\r\n    render() {\r\n        return (\r\n\r\n            <form onSubmit={this.hendelSubmit}>\r\n                <label htmlFor={this.nameInputId}>\r\n                    Имя <input type=\"text\"\r\n                        name='name'\r\n                        value={this.state.name}\r\n                        onChange={this.hendelChange}\r\n                        id={this.nameInputId} />\r\n                </label>\r\n                <label htmlFor={this.tagInputId} >\r\n                    Прозвище <input type=\"text\"\r\n                        name='tag'\r\n                        value={this.state.tag}\r\n                        onChange={this.hendelChange}\r\n                        id={this.tagInputId} />\r\n                </label>\r\n                {/* ==========радио кнопки =experience: 'junior'==============*/}\r\n                <p>Ваш уровень:</p>\r\n                <label>\r\n                    <input\r\n                        type=\"radio\"\r\n                        name=\"experience\"\r\n                        value=\"junior\"\r\n                        onChange={this.handleChange}\r\n                        checked={this.state.experience === 'junior'}\r\n                    />\r\n          Junior\r\n        </label>\r\n\r\n                <label>\r\n                    <input\r\n                        type=\"radio\"\r\n                        name=\"experience\"\r\n                        value=\"middle\"\r\n                        onChange={this.handleChange}\r\n                        checked={this.state.experience === 'middle'}\r\n                    />\r\n          Middle\r\n        </label>\r\n                <label>\r\n                    <input\r\n                        type=\"radio\"\r\n                        name=\"experience\"\r\n                        value=\"senior\"\r\n                        onChange={this.handleChange}\r\n                        checked={this.state.experience === 'senior'}\r\n                    />\r\n          Senior\r\n        </label>\r\n\r\n                <br />\r\n       \r\n                <button type='submit'>Оправить</button>\r\n            </form>\r\n        );\r\n    }\r\n}\r\nexport default Form;","  \r\nimport React, { Component } from 'react';\r\n// import './TodoEditor.scss';\r\n\r\nclass TodoEditor extends Component {\r\n  state = {\r\n    message: '',\r\n  };\r\n\r\n  handleChange = e => {\r\n    this.setState({ message: e.currentTarget.value });\r\n  };\r\n\r\n  handleSubmit = e => {\r\n    e.preventDefault();\r\nconsole.log(this.state)\r\n    this.props.onSubmit(this.state.message);\r\n\r\n     this.setState({ message: '' });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n        <form\r\n            // className=\"TodoEditor\"\r\n            onSubmit={this.handleSubmit}>\r\n        <textarea\r\n        //   className=\"TodoEditor__textarea\"\r\n          value={this.state.message}\r\n          onChange={this.handleChange}\r\n        ></textarea>\r\n            <button type=\"submit\"\r\n            // className=\"TodoEditor__button\"\r\n            >\r\n          Сохранить\r\n        </button>\r\n      </form>\r\n    );\r\n  }\r\n}\r\n\r\nexport default TodoEditor;","import React from 'react';\r\n\r\n//его стейт в арр\r\n\r\nconst Filter = ({ value, onChange }) => (\r\n  <label>\r\n    Фильтр по имени\r\n    <input type=\"text\" value={value} onChange={onChange} />\r\n  </label>\r\n);\r\n\r\nexport default Filter;","import React, { Component } from 'react';\r\n//метод создать портал из реакт дома\r\n import { createPortal } from 'react-dom';\r\nimport './Modal.css';\r\n\r\n const modalRoot = document.querySelector('#modal-root');\r\n//закрытие по ескейп\r\nexport default class Modal extends Component {\r\n    //при монтировании\r\n  componentDidMount() {\r\n    console.log('Modal componentDidMount');\r\n    window.addEventListener('keydown', this.handleKeyDown);\r\n  }\r\n//при размантировании чистим\r\n  componentWillUnmount() {\r\n    console.log('Modal componentWillUnmount');\r\n    window.removeEventListener('keydown', this.handleKeyDown);\r\n  }\r\n\r\n  handleKeyDown = e => {\r\n    if (e.code === 'Escape') {\r\n      console.log('Нажали ESC, нужно закрыть модалку');\r\n//вызвали пропс\r\n      this.props.onClose();\r\n    }\r\n  };\r\n\r\n  handleBackdropClick = event => {\r\n//     console.log('Кликнули в бекдроп');\r\n//       //где поймали\r\n//       console.log('currentTarget: ', event.currentTarget);\r\n//       //что нажали\r\n//     console.log('target: ', event.target);\r\n\r\n    if (event.currentTarget === event.target) {\r\n      this.props.onClose();\r\n    }\r\n  };\r\n\r\n  render() {\r\n    return createPortal(\r\n      <div className=\"Modal__backdrop\" onClick={this.handleBackdropClick}>\r\n        <div className=\"Modal__content\">{this.props.children}</div>\r\n      </div>,   modalRoot,\r\n     \r\n    );\r\n  }\r\n}\r\n  \r\n\r\n","import React, { Component } from 'react';\nimport Counter from './components/Counter/Counter/Counter';\n //import Counter from './components/Counter/Counter';\n// import Dropdown from './components/Counter/Dropdown';\n// import ColorPicker from './components/Counter/ColorPicker';\nimport TodoList from './components/TodoList';\nimport Form from './components/Form';\nimport initialTodos from './todos.json';\nimport TodoEditor from './components/TodoEditor/TodoEditor'\nimport shortid from 'shortid';\nimport Filter from './components/Filter'\n import Modal from './components/Modal'\n\nconst colorPickerOptions = [\n  { label: 'red', color: '#F44336' },\n  { label: 'green', color: '#4CAF50' },\n  { label: 'blue', color: '#2196F3' },\n  { label: 'grey', color: '#607D8B' },\n  { label: 'pink', color: '#E91E63' },\n  { label: 'indigo', color: '#3F51B5' },\n];\n\nclass App extends Component {\n  state = {\n    //храним массив\n    todos: initialTodos,\n       // inputValue: \"123\"\n    filter: '',\n    showModal: false\n  };\n\n  toggleModal = () => {\n    this.setState(state => ({\n      showModal: !state.showModal\n    }));\n  }\n  //во время сабмита получить данные текст, для єтого передаем как\n  //проп для формы TodoEditor, назовем онсабмит и во время сабмита мы это вызовем\n  //как this.props.onSubmit(this.state.message)\n  addTodo = text => {\n    //проверяем работу\n    // console.log(text)\n\n    const todo = {\n      id: shortid.generate(),\n      text,\n      completed: false,\n    }\n  //обновляем состояние от предыдущего добавляем элемент, а стейте арр идет обновление\n    this.setState(prevState => ({\n      todos: [todo, ...prevState.todos],\n    })\n    );\n    // this.setState(({ todos }) => ({\n    //   todos: [todo, ...todos],\n    // }));\n  };\n\n//метод для удаления по id/ работа с коллекцией выкидываем елемент id которого совпадает\n  deleteTodo = todoId => {\n    this.setState(prevState => ({\n      todos: prevState.todos.filter(todo => todo.id !== todoId),\n    }));\n  };\n\n  // hendelInputChange = event => {\n  //   console.log(event.target.value);\n  //   this.setState({inputValue: event.target.value})\n  // }\n//метод поднятия состояния для формы, что б получить ответ сабмит в арр\n  formSubmitHandler = data => {\n    console.log(data)\n  }\n   toggleCompleted = todoId => {\n        // console.log(todoId)\n    // this.setState(prevState => ({\n    //   todos: prevState.todos.map(todo => {\n    //     if (todo.id === todoId) {\n    //       return {\n    //         ...todo,\n    //         completed: !todo.completed,\n    //       };\n    //     }\n\n    //     return todo;\n    //   }),\n    // }));\n//запись иначе\n    this.setState(({ todos }) => ({\n      todos: todos.map(todo =>\n        todo.id === todoId ? { ...todo, completed: !todo.completed } : todo,\n      ),\n    }));\n  };\n\n   changeFilter = e => {\n    this.setState({ filter: e.currentTarget.value });\n   };\n  \n  getVisibleTodos = () => {\n    const { filter, todos } = this.state;\n    const normalizedFilter = filter.toLowerCase();\n\n    return todos.filter(todo =>\n      todo.text.toLowerCase().includes(normalizedFilter),\n    );\n  };\n\n    calculateCompletedTodos = () => {\n    const { todos } = this.state;\n\n    return todos.reduce(\n      (total, todo) => (todo.completed ? total + 1 : total),\n      0,\n    );\n  };\n\n\n  componentDidMount() {\n     console.log('App componentDidMount');\n\n    const todos = localStorage.getItem('todos');\n    const parsedTodos = JSON.parse(todos);\n//переписать поверх\n    if (parsedTodos) {\n      this.setState({ todos: parsedTodos });\n    }\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n     console.log('App componentDidUpdate');\n//старый массив\n    console.log(prevState);\n    //новый массив\n    console.log(this.state)\n    const nextTodos = this.state.todos;\n    const prevTodos = prevState.todos;\n\n    if (nextTodos !== prevTodos) {\n      console.log('Обновилось поле todos, записываю todos в хранилище');\n      localStorage.setItem('todos', JSON.stringify(nextTodos));\n    }\n\n    // if (nextTodos.length > prevTodos.length && prevTodos.length !== 0) {\n    //   this.toggleModal();\n    // }\n  }\n\n  render() {\n    const { todos, filter, showModal } = this.state;\n    const totalTodoCount = todos.length;\n    const completedTodoCount = this.calculateCompletedTodos();\n    // const completedTodoCount = todos.reduce(\n    //   (total, todo) => (todo.completed ? total + 1 : total),\n    //   0,\n    // );\n\n    const visibleTodos = this.getVisibleTodos();\n     //тоглит свойства в массиве обьектов\n     //todo нам приходит из чекбокса и мы делаем новый \n     // обьект с изменениями на основе старого\n   \n    return (\n      <>\n          \n        {/* <Container></Container> */}\n        {/* <input type=\"text\" value={this.state.inputValue} onChange={this.hendelInputChange }/> */}\n        {/* это не метод onSubmit просто так назвали проп для финальных данных  */}\n        <Form onSubmit={this.formSubmitHandler} />\n        {/* у второго компонента Form будут другие id */}\n        <Form onSubmit={this.formSubmitHandler} />\n        <TodoEditor onSubmit={this.addTodo} />\n        {/* фильрация */}\n        {/* <label>\n          Фильтр по имени\n          <input type=\"text\"\n            value={this.state.filter}\n            onChange={this.changeFilter} />\n        </label> */}\n            <Filter value={filter} onChange={this.changeFilter} />\n\n        {/* <h1>Состояние компонента</h1> */}\n\n        {/* <Counter initialValue={10} /> */}\n        {/* <Dropdown /> */}\n        {/* <ColorPicker options={colorPickerOptions} /> */}\n\n        <div>\n          <p>Общее кол-во: {totalTodoCount}</p>\n          <p>Кол-во выполненных: {completedTodoCount}</p>\n        </div>\n        {/* //передаем пропсы для удаления от родителей к детям */}\n        <TodoList\n          // todos={todos}\n          todos={visibleTodos}\n          onDeleteTodo={this.deleteTodo}\n          onToggleCompleted={this.toggleCompleted} \n        />\n        \n        <button type=\"button\" onClick={this.toggleModal}> открыть модальное окно </button>\n        //this.props.onClose передаем\n        {showModal && <Modal  onClose={this.toggleModal}>\n          <p>Привет это children</p>\n             <button type=\"button\" onClick={this.toggleModal}> закрыть модальное окно </button>\n        </Modal>}\n      </>\n    );\n  }\n}\n\nexport default App; ","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}